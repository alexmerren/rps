// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	repository "github.com/alexmerren/rps/internal/github/repository"
)

// GithubAPI is an autogenerated mock type for the GithubAPI type
type GithubAPI struct {
	mock.Mock
}

// GetStarredRepositories provides a mock function with given fields: username
func (_m *GithubAPI) GetStarredRepositories(username string) ([]*repository.Repository, error) {
	ret := _m.Called(username)

	var r0 []*repository.Repository
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*repository.Repository, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) []*repository.Repository); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*repository.Repository)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStarredRepositoriesWithContext provides a mock function with given fields: ctx, username
func (_m *GithubAPI) GetStarredRepositoriesWithContext(ctx context.Context, username string) ([]*repository.Repository, error) {
	ret := _m.Called(ctx, username)

	var r0 []*repository.Repository
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*repository.Repository, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*repository.Repository); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*repository.Repository)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserRepositories provides a mock function with given fields: username
func (_m *GithubAPI) GetUserRepositories(username string) ([]*repository.Repository, error) {
	ret := _m.Called(username)

	var r0 []*repository.Repository
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*repository.Repository, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) []*repository.Repository); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*repository.Repository)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserRepositoriesWithContext provides a mock function with given fields: ctx, username
func (_m *GithubAPI) GetUserRepositoriesWithContext(ctx context.Context, username string) ([]*repository.Repository, error) {
	ret := _m.Called(ctx, username)

	var r0 []*repository.Repository
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*repository.Repository, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*repository.Repository); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*repository.Repository)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewGithubAPI interface {
	mock.TestingT
	Cleanup(func())
}

// NewGithubAPI creates a new instance of GithubAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGithubAPI(t mockConstructorTestingTNewGithubAPI) *GithubAPI {
	mock := &GithubAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
