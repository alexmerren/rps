// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// GithubConfigurator is an autogenerated mock type for the GithubConfigurator type
type GithubConfigurator struct {
	mock.Mock
}

type GithubConfigurator_Expecter struct {
	mock *mock.Mock
}

func (_m *GithubConfigurator) EXPECT() *GithubConfigurator_Expecter {
	return &GithubConfigurator_Expecter{mock: &_m.Mock}
}

// GetToken provides a mock function with given fields:
func (_m *GithubConfigurator) GetToken() (string, error) {
	ret := _m.Called()

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GithubConfigurator_GetToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetToken'
type GithubConfigurator_GetToken_Call struct {
	*mock.Call
}

// GetToken is a helper method to define mock.On call
func (_e *GithubConfigurator_Expecter) GetToken() *GithubConfigurator_GetToken_Call {
	return &GithubConfigurator_GetToken_Call{Call: _e.mock.On("GetToken")}
}

func (_c *GithubConfigurator_GetToken_Call) Run(run func()) *GithubConfigurator_GetToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GithubConfigurator_GetToken_Call) Return(_a0 string, _a1 error) *GithubConfigurator_GetToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GithubConfigurator_GetToken_Call) RunAndReturn(run func() (string, error)) *GithubConfigurator_GetToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsername provides a mock function with given fields:
func (_m *GithubConfigurator) GetUsername() (string, error) {
	ret := _m.Called()

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GithubConfigurator_GetUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsername'
type GithubConfigurator_GetUsername_Call struct {
	*mock.Call
}

// GetUsername is a helper method to define mock.On call
func (_e *GithubConfigurator_Expecter) GetUsername() *GithubConfigurator_GetUsername_Call {
	return &GithubConfigurator_GetUsername_Call{Call: _e.mock.On("GetUsername")}
}

func (_c *GithubConfigurator_GetUsername_Call) Run(run func()) *GithubConfigurator_GetUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GithubConfigurator_GetUsername_Call) Return(_a0 string, _a1 error) *GithubConfigurator_GetUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GithubConfigurator_GetUsername_Call) RunAndReturn(run func() (string, error)) *GithubConfigurator_GetUsername_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewGithubConfigurator interface {
	mock.TestingT
	Cleanup(func())
}

// NewGithubConfigurator creates a new instance of GithubConfigurator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGithubConfigurator(t mockConstructorTestingTNewGithubConfigurator) *GithubConfigurator {
	mock := &GithubConfigurator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
