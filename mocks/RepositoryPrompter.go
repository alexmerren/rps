// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	repository "github.com/alexmerren/rps/internal/github/repository"
)

// RepositoryPrompter is an autogenerated mock type for the RepositoryPrompter type
type RepositoryPrompter struct {
	mock.Mock
}

// SelectRepositoryPrompt provides a mock function with given fields: repositories
func (_m *RepositoryPrompter) SelectRepositoryPrompt(repositories []*repository.Repository) (int, error) {
	ret := _m.Called(repositories)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]*repository.Repository) (int, error)); ok {
		return rf(repositories)
	}
	if rf, ok := ret.Get(0).(func([]*repository.Repository) int); ok {
		r0 = rf(repositories)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]*repository.Repository) error); ok {
		r1 = rf(repositories)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepositoryPrompter interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepositoryPrompter creates a new instance of RepositoryPrompter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepositoryPrompter(t mockConstructorTestingTNewRepositoryPrompter) *RepositoryPrompter {
	mock := &RepositoryPrompter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
